---
apiVersion: v1
kind: Namespace
metadata:
  # [ALTERNATIVE COMMAND] > kubectl create namespace [NAMESPACE]
  name: mongodb-staging
  # [ALTERNATIVE COMMAND] > kubectl apply --filename *.yaml
  labels:
    name: mongodb-staging

---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  # [ALTERNATIVE COMMAND] > kubectl apply --filename *.yaml --namespace=mongodb-staging
  namespace: mongodb-staging
type: Opaque
data:
  mongo-root-username: dXNlcm5hbWU=
  mongo-root-password: cGFzc3dvcmQ=

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-configmap
  # [ALTERNATIVE COMMAND] > kubectl apply --filename *.yaml --namespace=mongodb-staging
  namespace: mongodb-staging
data:
  # mongodb_server: mongodb-service.mongodb-staging
  mongodb_server: mongodb-service # Service can be accessed via Global Namespace.

---
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# @description: Apply this watcher via the following Commands.
# @command >> sudo watch kubectl get sc,pv,pvc --output wide --all-namespaces;
# @command >> sudo kubectl delete --namespace mongodb-staging pv/mongodb pvc/mongodb;
# @see {@link https://stackoverflow.com/questions/34282704/can-a-pvc-be-bound-to-a-specific-pv}
# ----------------------------------------------------------------------------------------------------------------------------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb
  namespace: mongodb-staging
spec:
  accessModes:
    - ReadWriteMany # ["ReadWriteOnce", "ReadOnlyMany", "ReadWriteMany"]
  storageClassName: longhorn-retain # ["gce-pd", "longhorn-delete", "longhorn-retain"]
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  # [ALTERNATIVE COMMAND] > kubectl apply --filename *.yaml --namespace=mongodb-staging
  namespace: mongodb-staging
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:4.4.13
          ports:
            # @description: Database Application Exposed via Custom HTTP Port::27017
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-password
          volumeMounts:
            - name: database
              mountPath: /data/db/
      volumes:
        - name: database
          persistentVolumeClaim:
            claimName: mongodb

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  # [ALTERNATIVE COMMAND] > kubectl apply --filename *.yaml --namespace=mongodb-staging
  namespace: mongodb-staging
spec:
  selector:
    app: mongodb
  ports:
    # [[PROVIDE SERVICE-NAME WITHIN MULTIPLE SERVICES ENTRY-POINT]] >> @see {@link https://www.youtube.com/watch?v=T4Z7visMM4E&t=766s}
    - name: mongodb
      protocol: TCP
      # [Kubernetes Cluster] - Service Port.
      port: 27017
      # [Kubernetes Cluster] - Deployment (Pods) Port.
      targetPort: 27017

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  # [ALTERNATIVE COMMAND] > kubectl apply --filename *.yaml --namespace=mongodb-staging
  namespace: mongodb-staging
  labels:
    app: mongo-express
spec:
  replicas: 1
  # [DISPLAY PODS COMMAND] > kubectl get pod --namespace=mongodb-staging
  selector:
    matchLabels:
      app: mongo-express
  template:
    # [DISPLAY PODS LOGGER COMMAND] > kubectl logs <POD_NAME> --namespace=mongodb-staging
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
        - name: mongo-express
          image: mongo-express:0.54.0
          ports:
            # @description: Docker Application User Interface Exposed via Default HTTP Port::80
            - containerPort: 80
          env:
            # @description: Mongo-Express Application Default HTTP Port::8081
            # @description: Hacky Modify Mongo-Express Application into HTTP Port::80
            # @see {@link https://stackoverflow.com/questions/46134197/how-to-change-the-port-number-8081-of-mongo-express}
            - name: VCAP_APP_PORT
              value: "80"
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-username
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-password
            - name: ME_CONFIG_MONGODB_SERVER
              valueFrom:
                configMapKeyRef:
                  name: mongodb-configmap
                  key: mongodb_server

---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
  # [ALTERNATIVE COMMAND] > kubectl apply --filename *.yaml --namespace=mongodb-staging
  namespace: mongodb-staging
spec:
  selector:
    app: mongo-express
  ports:
    # [[PROVIDE SERVICE-NAME WITHIN MULTIPLE SERVICES ENTRY-POINT]] >> @see {@link https://www.youtube.com/watch?v=T4Z7visMM4E&t=766s}
    - name: mongo-express
      protocol: TCP
      # [Kubernetes Cluster] - Service Port.
      port: 27027
      # [Kubernetes Cluster] - Deployment (Pods) Port.
      targetPort: 80

#  ---
#  apiVersion: cert-manager.io/v1
#  kind: Certificate
#  metadata:
#    name: mongo-express
#    # @describe: `kubectl describe certificate --namespace mongodb-staging`.
#    # @describe: `kubectl get secrets --namespace mongodb-staging`.
#    namespace: mongodb-staging
#  spec:
#    dnsNames:
#      - mongo-express.e8s.io
#    secretName: mongo-express-tls
#    issuerRef:
#      name: letsencrypt-cluster-issuer
#      kind: ClusterIssuer

#  ---
#  apiVersion: cert-manager.io/v1
#  kind: Certificate
#  metadata:
#    name: mongo-dashboard
#    # @describe: `kubectl describe certificate --namespace mongodb-staging`.
#    # @describe: `kubectl get secrets --namespace mongodb-staging`.
#    namespace: mongodb-staging
#  spec:
#    dnsNames:
#      - mongo-dashboard.e8s.io
#    secretName: mongo-dashboard-tls
#    issuerRef:
#      name: letsencrypt-cluster-issuer
#      kind: ClusterIssuer

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mongo-express
  namespace: mongodb-staging
  # @description: Ingress Rules: Wildcard & Specific Sub-Domain.
  # @see {@link https://stackoverflow.com/questions/52328483/kubernetes-ingress-rules-how-to-use-wildcard-and-specific-subdomain-together}
  annotations:
    kubernetes.io/tls-acme: "true"
    # @deprecated: Deprecated from Kubernetes v1.22+.
    # @description: Deploying multiple Ingress controllers resulted all controllers simultaneously racing to update Ingress status in confusing ways...
    # @see {@link https://kubernetes.github.io/ingress-nginx/user-guide/multiple-ingress/}
    kubernetes.io/ingress.class: nginx
    # @deprecated: Deprecated {@resources: nginx.ingress.kubernetes.io/add-base-url} from NGINX Ingress Controller.
    # @see {@link https://github.com/kubernetes/ingress-nginx/issues/3770#issuecomment-464449348}
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  tls:
    - hosts:
        - mongo-express.e8s.io
      secretName: mongo-express-tls
    - hosts:
        - mongo-dashboard.e8s.io
      secretName: mongo-dashboard-tls
  rules:
    - host: mongo-express.e8s.io
      http:
        paths:
          # @description: In case ${path} differ from ${rewrite-target}. All the following JS, CSS resources would have not been served correctly.
          # @see {@link https://github.com/kubernetes/ingress-nginx/issues/3770#issuecomment-464449348}
          # @deprecated: [- path: /mongo-express]
          - path: /
            pathType: Prefix
            backend:
              service:
                name: mongo-express-service
                port:
                  number: 27027
    - host: mongo-dashboard.e8s.io
      http:
        paths:
          # @description: In case ${path} differ from ${rewrite-target}. All the following JS, CSS resources would have not been served correctly.
          # @see {@link https://github.com/kubernetes/ingress-nginx/issues/3770#issuecomment-464449348}
          # @deprecated: [- path: /mongo-express]
          - path: /
            pathType: Prefix
            backend:
              service:
                name: mongo-express-service
                port:
                  number: 27027

