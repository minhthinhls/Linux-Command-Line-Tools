# ----------------------------------------------------------------------------------------------------------------------------------------------------
# @description: Portainer Community Edition Deployment via Kubernetes Template Engines.
# @see {@link https://github1s.com/portainer/k8s/blob/master/deploy/manifests/portainer/portainer.yaml}.
# ----------------------------------------------------------------------------------------------------------------------------------------------------
---
# Source: portainer/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: portainer-system

---
# Source: portainer/templates/ServiceAccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: portainer-sa-clusteradmin
  namespace: portainer-system
  labels:
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
    app.kubernetes.io/version: "portainer-v2.16.2-alpine"

---
# Source: portainer/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: portainer
  labels:
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
    app.kubernetes.io/version: "portainer-v2.16.2-alpine"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    namespace: portainer-system
    name: portainer-sa-clusteradmin

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# @description: Apply this watcher via the following Commands.
# @command >> sudo watch kubectl get sc,pv,pvc --output wide --all-namespaces;
# @command >> sudo kubectl delete --namespace portainer-system pv/portainer pvc/portainer;
# @see {@link https://stackoverflow.com/questions/34282704/can-a-pvc-be-bound-to-a-specific-pv}.
# ----------------------------------------------------------------------------------------------------------------------------------------------------
---
# Source: portainer/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: portainer
  namespace: portainer-system
  annotations:
    volume.alpha.kubernetes.io/storage-class: "generic"
  labels:
    io.portainer.kubernetes.application.stack: portainer
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
    app.kubernetes.io/version: "portainer-v2.16.2-alpine"
spec:
  # --------------------------------------------------------------------------------------------------------------------------------------------------
  # @description: In case Maintainer needs to Remount Persistent Volume back into PVC.
  # @description: Delete Persistent Volume Claims (PVCs) or Modify PVC attributes and [OPEN] the flag `volumeName` below.
  # @see {@link https://webera.blog/recreate-an-existing-pvc-in-a-new-namespace-but-reusing-the-same-pv-without-data-loss-2c7326c0035a}.
  # --------------------------------------------------------------------------------------------------------------------------------------------------
  # @description: After finishing apply `volumeName`. Delete the ${LAST_APPLIED_CONFIG} @{annotation} and re-apply this PVC Resource.
  # @command >> kubectl annotate pvc portainer --namespace portainer-system kubectl.kubernetes.io/last-applied-configuration-
  # --------------------------------------------------------------------------------------------------------------------------------------------------
  # volumeName: "pvc-********-****-****-****-************"
  accessModes:
    - ReadWriteMany # ["ReadWriteOnce", "ReadOnlyMany", "ReadWriteMany"]
  storageClassName: longhorn-retain # ["gce-pd", "longhorn-delete", "longhorn-retain"]
  resources:
    requests:
      storage: 10Gi

---
# Source: portainer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portainer
  namespace: portainer-system
  labels:
    io.portainer.kubernetes.application.stack: portainer
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
    app.kubernetes.io/version: "portainer-v2.16.2-alpine"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      app.kubernetes.io/name: portainer
      app.kubernetes.io/instance: portainer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: portainer
        app.kubernetes.io/instance: portainer
    spec:
      nodeSelector:
        { }
      serviceAccountName: portainer-sa-clusteradmin
      volumes:
        - name: "data"
          persistentVolumeClaim:
            claimName: portainer
      containers:
        - name: portainer
          image: "portainer/portainer-ee:2.16.2-alpine"
          imagePullPolicy: Always
          args:
            - '--tunnel-port=30776'
          volumeMounts:
            - name: data
              mountPath: /data
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
            - name: https
              containerPort: 9443
              protocol: TCP
            - name: tcp-edge
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 9443
              scheme: HTTPS
          readinessProbe:
            httpGet:
              path: /
              port: 9443
              scheme: HTTPS
          resources:
            { }

---
# Source: portainer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: portainer
  namespace: portainer-system
  labels:
    io.portainer.kubernetes.application.stack: portainer
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
    app.kubernetes.io/version: "portainer-v2.16.2-alpine"
spec:
  type: NodePort
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: http
      nodePort: 30777
    - port: 9443
      targetPort: 9443
      protocol: TCP
      name: https
      nodePort: 30779
    - port: 30776
      targetPort: 30776
      protocol: TCP
      name: edge
      nodePort: 30776
  selector:
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer

#  ---
#  apiVersion: cert-manager.io/v1
#  kind: Certificate
#  metadata:
#    name: portainer
#    # @describe: `kubectl describe certificate --namespace portainer-system`.
#    # @describe: `kubectl get secrets --namespace portainer-system`.
#    namespace: portainer-system
#  spec:
#    dnsNames:
#      - portainer.e8s.io
#    secretName: portainer-tls
#    issuerRef:
#      name: letsencrypt-production
#      kind: ClusterIssuer

#  ---
#  apiVersion: cert-manager.io/v1
#  kind: Certificate
#  metadata:
#    name: portainer-dashboard
#    # @describe: `kubectl describe certificate --namespace portainer-system`.
#    # @describe: `kubectl get secrets --namespace portainer-system`.
#    namespace: portainer-system
#  spec:
#    dnsNames:
#      - portainer-dashboard.e8s.io
#    secretName: portainer-dashboard-tls
#    issuerRef:
#      name: letsencrypt-production
#      kind: ClusterIssuer

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# @description: Deploying multiple Ingress controllers will result in all controllers simultaneously racing to update Ingress status in confusing ways.
# @see {@link https://kubernetes.github.io/ingress-nginx/user-guide/multiple-ingress/}.
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# @solution: Declare explicit IngressClasses to fix this problem.
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# * Using ${annotation} [kubernetes.io/ingress.class]
# * Using ${properties} [ingress.spec.ingressClassName]
# ----------------------------------------------------------------------------------------------------------------------------------------------------
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: portainer
  namespace: portainer-system
  # --------------------------------------------------------------------------------------------------------------------------------------------------
  # @description: Ingress Rules: Wildcard & Specific Sub-Domain.
  # @see {@link https://stackoverflow.com/questions/52328483/kubernetes-ingress-rules-how-to-use-wildcard-and-specific-subdomain-together}.
  # --------------------------------------------------------------------------------------------------------------------------------------------------
  annotations:
    kubernetes.io/tls-acme: "true"
    # ------------------------------------------------------------------------------------------------------------------------------------------------
    # @deprecated: Deprecated from Kubernetes v1.18+.
    # @see {@link https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/}.
    # ------------------------------------------------------------------------------------------------------------------------------------------------
    # kubernetes.io/ingress.class: nginx
    # ------------------------------------------------------------------------------------------------------------------------------------------------
    ingress.kubernetes.io/class-name: nginx
    # ------------------------------------------------------------------------------------------------------------------------------------------------
    # @deprecated: {@resource: [nginx.ingress.kubernetes.io/add-base-url]} from NGINX Ingress Controller.
    # @see {@link https://github.com/kubernetes/ingress-nginx/issues/3770#issuecomment-464449348}.
    # ------------------------------------------------------------------------------------------------------------------------------------------------
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  # --------------------------------------------------------------------------------------------------------------------------------------------------
  # @see {@link https://stackoverflow.com/questions/72932892/class-name-shows-none-for-ingress-object-in-local-kubernetes}.
  # @see {@link https://kubernetes.io/docs/concepts/services-networking/ingress/#deprecated-annotation}.
  # --------------------------------------------------------------------------------------------------------------------------------------------------
  ingressClassName: nginx # Display [<CLASS>:nginx]
  tls:
    - hosts:
        - portainer.e8s.io
      secretName: wildcard-portainer-tls
    - hosts:
        - dashboard.portainer.e8s.io
      secretName: wildcard-portainer-tls
  rules:
    - host: portainer.e8s.io
      http:
        paths:
          # ------------------------------------------------------------------------------------------------------------------------------------------
          # @description: In case ${path} differ from ${rewrite-target}. All the following JS, CSS resources would have not been served correctly.
          # @see {@link https://github.com/kubernetes/ingress-nginx/issues/3770#issuecomment-464449348}.
          # @see {@link https://stackoverflow.com/questions/5462897/url-rewriting-broke-link-to-css}.
          # @see {@link https://github.com/kubernetes/ingress-nginx/issues/333}.
          # ------------------------------------------------------------------------------------------------------------------------------------------
          - path: /
            pathType: Prefix
            backend:
              service:
                name: portainer
                port:
                  number: 9000
    - host: dashboard.portainer.e8s.io
      http:
        paths:
          # ------------------------------------------------------------------------------------------------------------------------------------------
          # @description: In case ${path} differ from ${rewrite-target}. All the following JS, CSS resources would have not been served correctly.
          # @see {@link https://github.com/kubernetes/ingress-nginx/issues/3770#issuecomment-464449348}.
          # @see {@link https://stackoverflow.com/questions/5462897/url-rewriting-broke-link-to-css}.
          # @see {@link https://github.com/kubernetes/ingress-nginx/issues/333}.
          # ------------------------------------------------------------------------------------------------------------------------------------------
          - path: /
            pathType: Prefix
            backend:
              service:
                name: portainer
                port:
                  number: 9000

